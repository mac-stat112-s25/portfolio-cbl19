---
title: "Strings"
format: html
---

```{r}
library(tidyverse)

classes <- data.frame(
  sem        = c("SP2023", "FA2023", "SP2024"),
  area       = c("History", "Math", "Anthro"),
  enroll     = c("30 - people", "20 - people", "25 - people"),
  instructor = c("Ernesto Capello", "Lori Ziegelmeier", "Arjun Guneratne")
)

classes
```
```{r}
# Define a new variable "num" that adds up the number of characters in the area label
classes |>
  mutate(num = str_length(area))

# Change the areas to "history", "math", "anthro" instead of "History", "Math", "Anthro"
classes |> 
  mutate(area = str_to_lower(area))

# Create a variable that id's which courses were taught in spring
classes |> 
  mutate(spring = str_detect(sem, "SP"))

# Change the semester labels to "fall2023", "spring2024", "spring2023"
classes |> 
  mutate(sem = str_replace(sem, "SP", "spring")) |> 
  mutate(sem = str_replace(sem, "FA", "fall"))

# In the enroll variable, change all e's to 3's (just because?)
classes |> 
  mutate(enroll = str_replace_all(enroll, "e", "3"))

# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year
classes |> 
  mutate(semester = str_sub(sem, 1, 2),
         year = str_sub(sem, 3, 6))
```
```{r}
# How can we do this after mutating?
classes |> 
  mutate(spring = str_detect(sem, "SP")) |>
  filter(spring == TRUE)
```
```{r}
# We don't have to mutate first!
classes |> 
  filter(str_detect(sem, "SP"))
```
```{r}
# Yet another way
classes |> 
  filter(!str_detect(sem, "FA"))
```
```{r}
classes |> 
  separate(instructor, c("first", "last"), sep = " ")
#you'd have to pivot first, and instructors do not have the same names
```

```{r}
classes |> 
  separate(instructor, c("first", "last"), sep = " ")
```

```{r}
# Sometimes the function can "intuit" how we want to separate the variable
classes |> 
  separate(instructor, c("first", "last"))
```

```{r}
 classes |> 
   separate(enroll, c("students", "people"), sep = "-")
```
We separated sem into semester and year above using str_sub(). Why would this be hard using separate()? starts and ends aren't easy to seperate

```{r}
# (?<=[SP|FA]): any character *before* the split point is a "SP" or "FA"
# (?=2): the first character *after* the split point is a 2
classes |> 
  separate(sem, 
          c("semester", "year"),
          "(?<=[SP|FA])(?=2)")
```

```{r}
# More general:
# (?<=[a-zA-Z]): any character *before* the split point is a lower or upper case letter
# (?=[0-9]): the first character *after* the split point is number
classes |> 
  separate(sem, 
          c("semester", "year"),
          "(?<=[A-Z])(?=[0-9])")
```

```{r}
courses <- read.csv("https://mac-stat.github.io/data/registrar.csv")

# Check it out
head(courses)
```

```{r}
# Construct a table that indicates the number of classes offered in each day/time slot
courses |>
  group_by(days, time) |>
  summarize(sum = n())

# Print only the 6 most popular time slots
courses |>
  group_by(days, time) |>
  summarize(sum = n()) |>
  arrange(desc(sum)) |>
  head(6)


```
So that we can analyze it later, we want to wrangle the courses data:

Let’s get some enrollment info:
Split avail_max into 2 separate variables: avail and max.

Use avail and max to define a new variable called enroll. HINT: You’ll need as.numeric()

Split the course number into 3 separate variables: dept, number, and section. HINT: You can use separate() to split a variable into 3, not just 2 new variables.

Store this as courses_clean so that you can use it later.

```{r}
courses_clean <- courses |> 
  separate(avail_max, c("avail", "max"), sep = " / ") |> 
  mutate(enroll = as.numeric(max) - as.numeric(avail)) |> 
  separate(number, c("dept", "number", "section"))
  
head(courses_clean)
```
```{r}
# Identify the 6 departments that offered the most sections
courses_clean |>
  count(dept) |>
  arrange(desc(n)) |>
  head()

# Identify the 6 departments with the longest average course titles
courses_clean |>
  group_by(dept) |>
  mutate(length = str_length(name)) |>
  summarize(avg_length = median(length)) |>
  arrange(desc(avg_length)) |>
  head()

```
```{r}
# Get a subset of courses_clean that only includes courses taught by Alicia Johnson.
courses_clean |>
  filter(instructor == "Alicia Johnson")
```
Create a new dataset from courses_clean, named stat, that only includes STAT sections. In this dataset:

In the course names:

Remove “Introduction to” from any name.
Shorten “Statistical” to “Stat” where relevant.
Define a variable that records the start_time for the course.

Keep only the number, name, start_time, enroll columns.

The result should have 19 rows and 4 columns.

```{r}
courses_clean |>
  filter(dept == "STAT") |>
  mutate(name = str_replace_all(name, "Introduction to", "")) |>
  mutate(name = str_replace_all(name, "Statistical", "Stat")) |>
  separate(time, c("start_time", "end_time"), sep = " - ") |>
  select(number, name, start_time, enroll)

```
In the next exercises, we’ll dig into enrollments. Let’s get the data ready for that analysis here. Make the following changes to the courses_clean data. Because they have different enrollment structures, and we don’t want to compare apples and oranges, remove the following:

all sections in PE and INTD (interdisciplinary studies courses)

all music ensembles and dance practicums, i.e. all MUSI and THDA classes with numbers less than 100. HINT: !(dept == "MUSI" & as.numeric(number) < 100)

all lab sections. Be careful which variable you use here. For example, you don’t want to search by “Lab” and accidentally eliminate courses with words such as “Labor”.

Save the results as enrollments (don’t overwrite courses_clean).
```{r}
enrollments <-
courses_clean |>
  filter(!dept %in% c("PE", "INTD")) |>
  filter(!(dept == "MUSI" & as.numeric(number) < 100)) |>
  filter(!(dept == "THDA" & as.numeric(number) < 100)) |>
  filter(!(section == str_detect(section, "L")))
```


Explore enrollments by department. You decide what research questions to focus on. Use both visual and numerical summaries.

What's the average enrollment in philosophy classes?

```{r}
enrollments |>
  filter(dept == "PHIL") |>
  summarize(avg = median(enroll))

enrollments |>
  filter(dept == "PHIL") |>
ggplot(aes(x = crn, y = enroll)) +
geom_point()
```
```{r}
 enrollments |>
   filter(dept %in% c("STAT", "COMP"), number == 112, section == "01")
```
```{r}
 enrollments_2 <- enrollments |> 
   distinct(days, time, instructor, .keep_all = TRUE)

# NOTE: By default this keeps the first department alphabetically
# That's fine because we won't use this to analyze department enrollments!
 enrollments_2 |> 
   filter(instructor == "Brianna Heggeseth", name == "Introduction to Data Science")
```
Now, explore enrollments by instructor. You decide what research questions to focus on. Use both visual and numerical summaries.

How many German courses are taught by David Martyn (my advisor)?

```{r}
enrollments_2 |> 
   filter(instructor == "David Martyn")

enrollments_2 |> 
   filter(dept == "GERM") |>
ggplot(aes(x = instructor)) +
  geom_bar()
```

