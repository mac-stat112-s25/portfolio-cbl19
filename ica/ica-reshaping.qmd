---
title: "ica-reshaping"
format: html
---
```{r}
library(tidyverse)
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv') 
```
```{r}
penguins |>
  head()
```


```{r}
# Using count()
penguins |>
  count(species, sex)

# Using group_by() and summarize()
penguins |> 
  group_by(species, sex) |> 
  summarize(n())
```
```{r}
penguins |> 
  group_by(species, sex) |> 
  summarize(n()) |>
  mutate(freq = n / sum(n))
```
```{r}
penguin_avg <- penguins |> 
  group_by(species, sex) |> 
  summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE)) |> 
  na.omit()
```
```{r}
# Units of observation = same?
head(penguins)
```
```{r}
penguin_avg
```
```{r}


penguin_avg |> 
pivot_wider(names_from = sex, values_from = avg_body_mass)

```
```{r}
penguin_avg_wide <- penguin_avg |> 
  pivot_wider(names_from = sex, values_from = avg_body_mass)

penguin_avg_wide
```
```{r}
# We can either communicate which variables we WANT to collect into a single column (female, male)
penguin_avg_wide |> 
  pivot_longer(cols = c(female, male), names_to = "sex", values_to = "avg_body_mass")
```
```{r}
# Or which variable(s) we do NOT want to collect into a single column (sex)
penguin_avg_wide |> 
  pivot_longer(cols = -species, names_to = "sex", values_to = "avg_body_mass")
```
```{r}

food <- data.frame(
  customer = rep(c("A", "B"), each = 3),
  restaurant = rep(c("Shish", "FrenchMeadow", "DunnBros"), 2),
  order = c("falafel", "salad", "coffee", "baklava", "pastry", "tea")
)

food

food |> 
  pivot_wider(names_from = restaurant, values_from = order)
```
```{r}
more_food <- data.frame(
  customer = c("C", "D"),
  Shish = c("coffee", "maza"),
  FrenchMeadow = c("soup", "sandwich"),
  DunnBros = c("cookie", "coffee")
)
more_food

more_food |> 
  pivot_longer(cols = -customer, names_to = "restaurant", values_to = "order")
```
```{r}
more_food |> 
  pivot_longer(cols = -customer, names_to = "restaurant", values_to = "order")
```
```{r}
sleep_wide <- read.csv("https://mac-stat.github.io/data/sleep_wide.csv")

head(sleep_wide)
```
## Exercises

{{< include activity-instructions.qmd >}}

### Exercise 1: What's the problem? {.unnumbered}

Consider data on a sleep study in which subjects received only 3 hours of sleep per night.  Each day, their reaction time to a stimulus (in ms) was recorded.


```{r}
sleep_wide <- read.csv("https://mac-stat.github.io/data/sleep_wide.csv")

head(sleep_wide)
```

#### Part a {.unnumbered}

What are the units of observation in `sleep_wide`? subject, days, reaction time

#### Part b {.unnumbered}

Suppose I ask you to plot each subject's reaction time (y-axis) vs the number of days of sleep restriction (x-axis). "Sketch" out in words what the first few rows of the data need to look like in order to do this. It might help to think about what you'd need to complete the plotting frame:

`ggplot(___, aes(y = ___, x = ___, color = ___))`

there needs to be one column which has all of the days in it to plot, and the other with all of the reaction times, color needs to be each subject

#### Part c {.unnumbered}

How can you obtain the dataset you sketched in part b?

-   just using `sleep_wide` not possible
-   `pivot_longer()` combine multiple days into one day variable
-   `pivot_wider()` not the most useful


### Exercise 2: Pivot longer {.unnumbered}

To plot reaction time by day for each subject, we need to reshape the data into a **long** format where each row represents a subject/day combination. Specifically, we want a dataset with 3 columns and a first few rows that look something like this:

| Subject | day | reaction_time |
|--------:|----:|--------------:|
|     308 |   0 |        249.56 |
|     308 |   1 |        258.70 |
|     308 |   2 |        250.80 |

#### Part a {.unnumbered}

Use `pivot_longer()` to create the long-format dataset above. Show the first 3 lines (`head(3)`), which should be *similar* to those above. Follow-up: Thinking forward to plotting reaction time vs day for each subject, what would you like to fix / change about this dataset?

```{r}
# For cols, try 2 appproaches: using - and starts_with
# ___ |> 
#   pivot_longer(cols = ___, names_to = "___", values_to = "___")
 
sleep_wide |> 
   pivot_longer(cols = starts_with("day_"), names_to = "day", values_to = "reaction_time", names_prefix = "day_") |>
  head(3)

```

#### Part b {.unnumbered}

Run this chunk:

```{r}
sleep_long <- sleep_wide |>
  pivot_longer(cols = -Subject,
               names_to = "day",
               names_prefix = "day_",
               values_to = "reaction_time")

head(sleep_long)
```

Follow-up:

-   Besides putting each argument on a different line for readability and storing the results, what changed in the code? saved it as a separate dataset
-   How did this impact how the values are recorded in the `day` column? it didn't

#### Part c {.unnumbered}

Using `sleep_long`, construct a line plot of reaction time vs day for each subject. This will look goofy no matter what you do. Why? We want day to be numeric, subject to be categorical
HINT: look back at `head(sleep_long)`. What class or type of variables are `Subject` and `day`? What do we *want* them to be?

```{r}
ggplot(sleep_long, aes(x = day, y = reaction_time, color = Subject)) +
  geom_line()
```


### Exercise 3: Changing variable classes & plotting {.unnumbered}

Let's finalize `sleep_long` by *mutating* the `Subject` variable to be a `factor` (categorical) and the `day` variable to be `numeric` (quantitative). Take note of the `mutate()` code! You'll use this type of code a lot.

```{r}
sleep_long <- sleep_wide |>
  pivot_longer(cols = -Subject,
               names_to = "day",
               names_prefix = "day_",
               values_to = "reaction_time") |> 
  mutate(Subject = as.factor(Subject), day = as.numeric(day))

# Check it out
# Same data, different class
head(sleep_long)
```

#### Part a {.unnumbered}

*Now* make some plots.

```{r}
# Make a line plot of reaction time by day for each subject
# Put these all on the same frame
ggplot(sleep_long, aes(x = day, y = reaction_time, color = Subject)) +
  geom_line()
```

```{r}
# Make a line plot of reaction time by day for each subject
# Put these all on separate frames (one per subject)
ggplot(sleep_long, aes(x = day, y = reaction_time, color = Subject)) +
  geom_line() +
  facet_wrap(~Subject)
```

#### Part b {.unnumbered}

Summarize what you learned from the plots. For example:

-   What's the general relationship between reaction time and sleep? reaction time mostly increases, but at different speeds and amounts for each subject
-   Is this the same for everybody? What differs? no, some spike in the middle and some go up more linear



### Exercise 4: Pivot wider {.unnumbered}

Make the data *wide* again, with each day becoming its own column.

#### Part a {.unnumbered}

Adjust the code below. What don't you like about the column labels? not labelled by day

```{r}
 sleep_long |>
   pivot_wider(names_from = "day", values_from = "reaction_time") |> 
   head()
```

#### Part b {.unnumbered}

Using your intuition, adjust your code from part a to name the reaction time columns "day_0", "day_1", etc.

```{r}
 sleep_long |>
   pivot_wider(names_from = "day", values_from = "reaction_time", names_prefix = "day_") |> 
   head()
```



### Exercise 5: Practice with Billboard charts {.unnumbered}

Load data on songs that hit the `billboard` charts around the year 2000. Included for each song is the `artist` name, `track` name, the date it hit the charts (`date.enter`), and `wk`-related variables that indicate rankings in each subsequent week on the charts:

```{r}
# Load data
library(tidyr)
data("billboard")

# Check it out
head(billboard)
```

In using this data, you'll need to determine if and when the data needs to be reshaped for the task at hand.

#### Part a {.unnumbered}

Construct and summarize a plot of how a song's Billboard ranking its 2nd week on the chart (y-axis) is related to its ranking the 1st week on the charts (x-axis). Add a reference line `geom_abline(intercept = 0, slope = 1)`. Songs *above* this line *improved* their rankings from the 1st to 2nd week.

```{r}
ggplot(billboard, aes(y = wk2, x = wk1)) + 
  geom_point() +
  geom_abline(intercept = 0, slope = 1)
```

#### Part b {.unnumbered}

Use your wrangling tools to identify *which* songs are those above the line in Part a, i.e. with rankings that went up from week 1 to week 2.

```{r}
billboard |>
  filter(wk2 > wk1)
```

#### Part c {.unnumbered}

Define a new dataset, `nov_1999`, which:

-   only includes data on songs that entered the Billboard charts on November 6, 1999
-   keeps all variables *except* `track` and `date.entered`. HINT: How can you avoid writing out all the variable names you want to keep?

```{r}
# Define nov_1999
nov_1999 <-
billboard |>
  filter(date.entered == "1999-11-06") |>
  select(-track, -date.entered)

# Confirm that nov_1999 has 2 rows (songs) and 77 columns
head(nov_1999)
```

#### Part d {.unnumbered}

Create and discuss a visualization of the rankings (y-axis) over time (x-axis) for the 2 songs in `nov_1999`. There are hints below (if you scroll), but you're encouraged to play around and use as few hints as possible.

```{r}
nov_1999 |>
   pivot_longer(cols = starts_with("wk"),
               names_to = "week",
               names_prefix = "wk",
               values_to = "ranking") |>
  mutate(week = as.numeric(week)) |>
ggplot(aes(x = week, y = ranking, color = artist)) +
  geom_line()
```

Hints:

-   Should you first pivot wider or longer?
-   Once you pivot, the week number is turned into a character variable. How can you change it to a number?



### Exercise 6: Practice with the Daily Show {.unnumbered}

The data associated with [this article](https://fivethirtyeight.com/datalab/every-guest-jon-stewart-ever-had-on-the-daily-show/) is available in the `fivethirtyeight` package, and is loaded into `daily` below. It includes a list of every guest to ever appear on Jon Stewart's The Daily Show, a "late-night talk and satirical news" program (per Wikipedia). Check out the dataset and note that when multiple people appeared together, each person receives their own line:

```{r}
library(fivethirtyeight)
data("daily_show_guests")
daily <- daily_show_guests
head(daily)
```

In analyzing this data, you'll need to determine if and when the data needs to be reshaped.

#### Part a {.unnumbered}

Identify the 15 guests that appeared the most. (This isn't a very diverse guest list!)

```{r}
daily |>
  count(raw_guest_list) |>
  arrange(desc(n)) |> 
  head(15)
```

#### Part b {.unnumbered}

CHALLENGE: Create the following data set containing 19 columns:

-   The first column should have the 15 guests with the highest number of total appearances on the show, listed in descending order of number of appearances.
-   17 columns should show the number of appearances of the corresponding guest in each year from 1999 to 2015 (one per column).
-   Another column should show the total number of appearances for the corresponding guest over the entire duration of the show.

There are hints below (if you scroll), but you're encouraged to play around and use as few hints as possible.

```{r}
daily |>
  count(year, raw_guest_list) |>
  group_by(raw_guest_list) |>
  mutate(total = sum(n)) |>
  pivot_wider(names_from = year, 
              values_from = n,
              values_fill = 0) |> 
  arrange(desc(total)) |> 
  head(15)
  
```

HINTS: There are lots of ways to do this. You don't necessarily need all of these hints.

-   First obtain the number of times a guest appears each year.
-   Add a new column which includes the total number of times a guest appears across all years.
-   Pivot (longer or wider?). When you do, use `values_fill = 0` to replace NA values with 0.
-   Arrange, then and keep the top 15.

#### Part c {.unnumbered}

Let's recreate the first figure from [the article](https://fivethirtyeight.com/datalab/every-guest-jon-stewart-ever-had-on-the-daily-show/). This groups all guests into 3 broader occupational categories. However, our current data has 18 categories:

```{r}
daily |> 
  count(group)
```

Let's define a new dataset that includes a new variable, `broad_group`, that buckets these 18 categories into the 3 bigger ones used in the article. And get rid of any rows missing information on `broad_group`. You'll learn the code soon! For now, just run this chunk:

```{r}
plot_data <- daily |> 
  mutate(broad_group = case_when(
    group %in% c("Acting", "Athletics", "Comedy", "Musician") ~ "Acting, Comedy & Music",
    group %in% c("Media", "media", "Science", "Academic", "Consultant", "Clergy") ~ "Media",
    group %in% c("Politician", "Political Aide", "Government", "Military", "Business", "Advocacy") ~ "Government and Politics",
    .default = NA
  )) |> 
  filter(!is.na(broad_group))
```

Now, using the `broad_group` variable in `plot_data`, recreate the graphic from the article, with three different lines showing the fraction of guests in each group over time. Note: You'll have to wrangle the data first.

```{r}
plot_data |>
  group_by(broad_group, year) |>
  summarize(n = n()) |>
  mutate(freq = n / sum(n)) |> 
  ggplot(aes(y = freq, x = year, color = broad_group)) + 
    geom_line()
```

