---
title: "ica-dates"
format: html
---

```{r}
library(tidyverse)
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')

# Check it out
head(penguins)
```

```{r}
# Get data on only Adelie penguins that weigh more than 4700g
penguins |> 
select(species, body_mass_g) |> 
filter(species == "Adelie", body_mass_g > 4700)
```

```{r}
# Get data on penguin body mass only
# Show just the first 6 rows
penguins |> 
select(body_mass_g) |> 
  head()
```

```{r}
# Sort the penguins from smallest to largest body mass
# Show just the first 6 rows
penguins |> 
arrange(desc(body_mass_g)) |> 
  head()
```

```{r}
# Calculate the average body mass across all penguins
# Note: na.rm = TRUE removes the NAs from the calculation
penguins |> 
  summarize(mean = mean(body_mass_g, na.rm = TRUE))
```

```{r}
# Calculate the average body mass by species
penguins |> 
  group_by(species) |>
  summarize(mean = mean(body_mass_g, na.rm = TRUE))
```

```{r}
# Create a new column that records body mass in kilograms, not grams
# NOTE: there are 1000 g in 1 kg
# Show just the first 6 rows
penguins |> 
  mutate(body_mass_kg = body_mass_g / 1000) |>
  head()
```

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar()

```

```{r}
penguins |> 
  count(species)
```

```{r}
# Sort Gentoo penguins from biggest to smallest with respect to their 
# bill length in cm (there are 10 mm in a cm)
penguins |> 
  select(species, bill_length_mm) |>
  filter(species == "Gentoo") |>
  mutate(bill_length_cm = bill_length_mm / 10) |>
  arrange(bill_length_cm)

```

```{r}
# Sort the species from smallest to biggest with respect to their 
# average bill length in cm
penguins |> 
  mutate(bill_length_cm = bill_length_mm / 10) |>
  group_by(species) |>
  summarize(mean = mean(bill_length_cm, na.rm = TRUE)) |>
  arrange(desc(mean)) 
```

```{r}
penguins |> 
filter(species == "Chinstrap") |> 
group_by(sex) |> 
summarize(min = min(body_mass_g), max = max(body_mass_g)) |> 
mutate(range = max - min)
```

```{r}
# Create a dataset with just Adelie and Chinstrap using %in%
# Pipe this into `count(species)` to confirm that you only have these 2 species
 penguins |> 
  filter(species %in% c("Adelie", "Chinstrap")) |> 
   count(species)
```

```{r}
# Create a dataset with just Adelie and Chinstrap using !=
# Pipe this into `count(species)` to confirm that you only have these 2 species
 penguins |> 
  filter(species != c("Adelie", "Chinstrap")) |> 
   count(species)
```

```{r}
head(penguins)
nrow(penguins)
```

```{r}
# NOTE the use of is.na()
penguins |> 
  summarize(sum(is.na(body_mass_g)))
```

```{r}
# NOTE the use of is.na()
penguins_w_body_mass <- penguins |> 
  filter(!is.na(body_mass_g))

# Compare the number of penguins in this vs the original data
nrow(penguins_w_body_mass)
```

```{r}
penguins_w_body_mass |> 
  summarize(sum(is.na(sex)))
```

```{r}
penguins_complete <- penguins |> 
  na.omit()
nrow(penguins_complete)
nrow(penguins)
```

Explain why we should only use na.omit() in extreme circumstances.
Most of the time, we're only focused on a few columns of data, but this gets rid of all na values, even the ones we don't care about.

```{r}
# First: recall the variable names
names(penguins)
```

```{r}
# Use a shortcut to keep everything but the year and island variables
penguins |>
  select(-year, -island)
```
```{r}
# Use a shortcut to keep only species and the penguin characteristics measured in mm
penguins |>
  select(species, contains("mm"))
```
```{r}
# Use a shortcut to keep only species and bill-related measurements
penguins |>
  select(species, contains("bill"))
```

```{r}
# Use a shortcut to keep only species and the length-related characteristics
penguins |>
  select(species, contains("length"))
```
```{r}
# Change this code to sort the penguins by species, and then island name
# NOTE: The first row should be an Adelie penguin living on Biscoe island
penguins |> 
  arrange(species, island)
```

```{r}
# Change this code to count the number of male/female penguins observed for each species
penguins |> 
  count(species, sex) 
```
```{r}
# Change this code to calculate the average body mass by species and sex
penguins |> 
  group_by(species, sex) |> 
  summarize(mean = mean(body_mass_g, na.rm = TRUE))
```
```{r}
# Get today's date
as.Date(today())
```

```{r}
# Let's store this as "today" so we can work with it below
today <- as.Date(today())

# Check out the class of this object
class(today)
```
```{r}
#tells the year
year(today)
```
```{r}
# What do these lines produce / what's their difference? function is different
month(today)
```
```{r}
month(today, label = TRUE)
```

```{r}
# What does this number mean? 9th week of the year
week(today)
```
```{r}
# What do these lines produce / what's their difference? day of the month
mday(today)
```

```{r}
yday(today)  # This is often called the "Julian day" day of the year
```

```{r}
# What do these lines produce / what's their difference? day of the week, number v date
wday(today)
wday(today, label = TRUE)
```
```{r}
# What do the results of these 2 lines tell us? today happened after 2024-02-14
today >= ymd("2024-02-14")
today < ymd("2024-02-14")
```
```{r}
library(mosaic)
data("Birthdays")
head(Birthdays)
```
```{r}
# How many days of data do we have for each state?
Birthdays |> 
  group_by(state) |>
  summarize(total = sum(day))

# How many total births were there in this time period?
Birthdays |>
  summarize(total = sum(births))

# How many total births were there per state in this time period, sorted from low to high?
Birthdays |>
  group_by(state) |>
  summarize(total = sum(births)) |>
  arrange()
```

```{r}
# Calculate the total number of births in each month and year, eg, Jan 1969, Feb 1969, …. Label month by names not numbers, eg, Jan not 1. Then, plot the births by month and comment on what you learn.
daily_births <-
Birthdays |>
select(year, month, births) |>
group_by(year, month) |>
mutate(sum = sum(births)) 

ggplot(daily_births, aes(x = month, y = sum)) +
geom_point()
```
```{r}
#In 1988, calculate the total number of births per week in each state. Get rid of week “53”, which isn’t a complete week! Then, make a line plot of births by week for each state and comment on what you learn. For example, do you notice any seasonal trends? Are these the same in every state? Any outliers?
per_week <-
Birthdays |>
  group_by(state) |>
  filter(year == "1988") |>
  summarize(total = sum(births) / 52) |>
  arrange() 

ggplot(per_week, aes(x = state, y = total)) +
geom_point()
```

```{r}
# Repeat the above for just Minnesota (MN) and Louisiana (LA). MN has one of the coldest climates and LA has one of the warmest. How do their seasonal trends compare? Do you think these trends are similar in other colder and warmer states? Try it!


```

```{r}
# Create a dataset with only births in Massachusetts (MA) in 1979 and sort the days from those with the most births to those with the fewest.
Birthdays |>
  select(state, year, births, day) |>
  filter(state == "MA", year == "1979") |>
  arrange(births)
```

```{r}
# Make a table showing the five states with the most births between September 9, 1979 and September 12, 1979, including the 9th and 12th. Arrange the table in descending order of births.
Birthdays |>
  group_by(state) |>
  select(state, year, births, day) |>
  filter(c("1979-09-09" <= "1979-09-12")) |> 
  arrange(births)
```

